/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ProtonInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchProtonsForSale(address,uint256,uint256,string[],uint256[])": FunctionFragment;
    "buyProton(uint256)": FunctionFragment;
    "claimCreatorRoyalties()": FunctionFragment;
    "createBasicProton(address,address,string)": FunctionFragment;
    "createChargedParticle(address,address,address,string,string,address,uint256,uint256)": FunctionFragment;
    "createProton(address,address,string,uint256)": FunctionFragment;
    "createProtonForSale(address,address,string,uint256,uint256,uint256)": FunctionFragment;
    "creatorOf(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCreatorRoyalties(address)": FunctionFragment;
    "getCreatorRoyaltiesPct(uint256)": FunctionFragment;
    "getCreatorRoyaltiesReceiver(uint256)": FunctionFragment;
    "getLastSellPrice(uint256)": FunctionFragment;
    "getSalePrice(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setChargedParticles(address)": FunctionFragment;
    "setChargedSettings(address)": FunctionFragment;
    "setChargedState(address)": FunctionFragment;
    "setCreatorRoyaltiesReceiver(uint256,address)": FunctionFragment;
    "setPausedState(bool)": FunctionFragment;
    "setRoyaltiesPct(uint256,uint256)": FunctionFragment;
    "setSalePrice(uint256,uint256)": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "setUniverse(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "versionRecipient()": FunctionFragment;
    "withdrawERC721(address,address,uint256)": FunctionFragment;
    "withdrawErc20(address,address,uint256)": FunctionFragment;
    "withdrawEther(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchProtonsForSale",
    values: [string, BigNumberish, BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyProton",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCreatorRoyalties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBasicProton",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createChargedParticle",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createProton",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProtonForSale",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorRoyalties",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorRoyaltiesPct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorRoyaltiesReceiver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastSellPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSalePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setChargedParticles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChargedSettings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChargedState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreatorRoyaltiesReceiver",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPausedState",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltiesPct",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSalePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setUniverse", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchProtonsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyProton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCreatorRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBasicProton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChargedParticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProtonForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creatorOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorRoyaltiesPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorRoyaltiesReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChargedParticles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChargedSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChargedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorRoyaltiesReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPausedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltiesPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ChargedParticlesSet(address)": EventFragment;
    "ChargedSettingsSet(address)": EventFragment;
    "ChargedStateSet(address)": EventFragment;
    "CreatorRoyaltiesSet(uint256,uint256)": EventFragment;
    "FeesWithdrawn(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PausedStateSet(bool)": EventFragment;
    "ProtonSold(uint256,address,address,uint256,address,uint256)": EventFragment;
    "RoyaltiesClaimed(address,uint256)": EventFragment;
    "SalePriceSet(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferBatch(address,address,uint256,uint256)": EventFragment;
    "UniverseSet(address)": EventFragment;
    "WithdrawStuckERC20(address,address,uint256)": EventFragment;
    "WithdrawStuckERC721(address,address,uint256)": EventFragment;
    "WithdrawStuckEther(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChargedParticlesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChargedSettingsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChargedStateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorRoyaltiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedStateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtonSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SalePriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniverseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStuckERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStuckERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStuckEther"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type ChargedParticlesSetEvent = TypedEvent<
  [string] & { chargedParticles: string }
>;

export type ChargedSettingsSetEvent = TypedEvent<
  [string] & { chargedSettings: string }
>;

export type ChargedStateSetEvent = TypedEvent<
  [string] & { chargedState: string }
>;

export type CreatorRoyaltiesSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { tokenId: BigNumber; royaltiesPct: BigNumber }
>;

export type FeesWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedStateSetEvent = TypedEvent<[boolean] & { isPaused: boolean }>;

export type ProtonSoldEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, BigNumber] & {
    tokenId: BigNumber;
    oldOwner: string;
    newOwner: string;
    salePrice: BigNumber;
    creator: string;
    creatorRoyalties: BigNumber;
  }
>;

export type RoyaltiesClaimedEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; amountClaimed: BigNumber }
>;

export type SalePriceSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { tokenId: BigNumber; salePrice: BigNumber }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    from: string;
    to: string;
    startTokenId: BigNumber;
    count: BigNumber;
  }
>;

export type UniverseSetEvent = TypedEvent<[string] & { universe: string }>;

export type WithdrawStuckERC20Event = TypedEvent<
  [string, string, BigNumber] & {
    receiver: string;
    tokenAddress: string;
    amount: BigNumber;
  }
>;

export type WithdrawStuckERC721Event = TypedEvent<
  [string, string, BigNumber] & {
    receiver: string;
    tokenAddress: string;
    tokenId: BigNumber;
  }
>;

export type WithdrawStuckEtherEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; amount: BigNumber }
>;

export class Proton extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProtonInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchProtonsForSale(
      creator: string,
      annuityPercent: BigNumberish,
      royaltiesPercent: BigNumberish,
      tokenMetaUris: string[],
      salePrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyProton(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCreatorRoyalties(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBasicProton(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createChargedParticle(
      creator: string,
      receiver: string,
      referrer: string,
      tokenMetaUri: string,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      annuityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProton(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      annuityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProtonForSale(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      annuityPercent: BigNumberish,
      royaltiesPercent: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creatorOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreatorRoyalties(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreatorRoyaltiesPct(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreatorRoyaltiesReceiver(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLastSellPrice(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSalePrice(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChargedParticles(
      chargedParticles: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChargedSettings(
      settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChargedState(
      stateController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreatorRoyaltiesReceiver(
      tokenId: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPausedState(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltiesPct(
      tokenId: BigNumberish,
      royaltiesPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSalePrice(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUniverse(
      universe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    versionRecipient(overrides?: CallOverrides): Promise<[string]>;

    withdrawERC721(
      receiver: string,
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawErc20(
      receiver: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  batchProtonsForSale(
    creator: string,
    annuityPercent: BigNumberish,
    royaltiesPercent: BigNumberish,
    tokenMetaUris: string[],
    salePrices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyProton(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCreatorRoyalties(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBasicProton(
    creator: string,
    receiver: string,
    tokenMetaUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createChargedParticle(
    creator: string,
    receiver: string,
    referrer: string,
    tokenMetaUri: string,
    walletManagerId: string,
    assetToken: string,
    assetAmount: BigNumberish,
    annuityPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProton(
    creator: string,
    receiver: string,
    tokenMetaUri: string,
    annuityPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProtonForSale(
    creator: string,
    receiver: string,
    tokenMetaUri: string,
    annuityPercent: BigNumberish,
    royaltiesPercent: BigNumberish,
    salePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creatorOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreatorRoyalties(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreatorRoyaltiesPct(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreatorRoyaltiesReceiver(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLastSellPrice(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSalePrice(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChargedParticles(
    chargedParticles: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChargedSettings(
    settings: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChargedState(
    stateController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreatorRoyaltiesReceiver(
    tokenId: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPausedState(
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltiesPct(
    tokenId: BigNumberish,
    royaltiesPct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSalePrice(
    tokenId: BigNumberish,
    salePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    _trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUniverse(
    universe: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  versionRecipient(overrides?: CallOverrides): Promise<string>;

  withdrawERC721(
    receiver: string,
    tokenAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawErc20(
    receiver: string,
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchProtonsForSale(
      creator: string,
      annuityPercent: BigNumberish,
      royaltiesPercent: BigNumberish,
      tokenMetaUris: string[],
      salePrices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    buyProton(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimCreatorRoyalties(overrides?: CallOverrides): Promise<BigNumber>;

    createBasicProton(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createChargedParticle(
      creator: string,
      receiver: string,
      referrer: string,
      tokenMetaUri: string,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      annuityPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProton(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      annuityPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProtonForSale(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      annuityPercent: BigNumberish,
      royaltiesPercent: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatorOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreatorRoyalties(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorRoyaltiesPct(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorRoyaltiesReceiver(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLastSellPrice(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSalePrice(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setChargedParticles(
      chargedParticles: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChargedSettings(
      settings: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChargedState(
      stateController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreatorRoyaltiesReceiver(
      tokenId: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPausedState(state: boolean, overrides?: CallOverrides): Promise<void>;

    setRoyaltiesPct(
      tokenId: BigNumberish,
      royaltiesPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSalePrice(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniverse(universe: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    versionRecipient(overrides?: CallOverrides): Promise<string>;

    withdrawERC721(
      receiver: string,
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawErc20(
      receiver: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEther(
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "ChargedParticlesSet(address)"(
      chargedParticles?: string | null
    ): TypedEventFilter<[string], { chargedParticles: string }>;

    ChargedParticlesSet(
      chargedParticles?: string | null
    ): TypedEventFilter<[string], { chargedParticles: string }>;

    "ChargedSettingsSet(address)"(
      chargedSettings?: string | null
    ): TypedEventFilter<[string], { chargedSettings: string }>;

    ChargedSettingsSet(
      chargedSettings?: string | null
    ): TypedEventFilter<[string], { chargedSettings: string }>;

    "ChargedStateSet(address)"(
      chargedState?: string | null
    ): TypedEventFilter<[string], { chargedState: string }>;

    ChargedStateSet(
      chargedState?: string | null
    ): TypedEventFilter<[string], { chargedState: string }>;

    "CreatorRoyaltiesSet(uint256,uint256)"(
      tokenId?: BigNumberish | null,
      royaltiesPct?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; royaltiesPct: BigNumber }
    >;

    CreatorRoyaltiesSet(
      tokenId?: BigNumberish | null,
      royaltiesPct?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; royaltiesPct: BigNumber }
    >;

    "FeesWithdrawn(address,uint256)"(
      receiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;

    FeesWithdrawn(
      receiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PausedStateSet(bool)"(
      isPaused?: null
    ): TypedEventFilter<[boolean], { isPaused: boolean }>;

    PausedStateSet(
      isPaused?: null
    ): TypedEventFilter<[boolean], { isPaused: boolean }>;

    "ProtonSold(uint256,address,address,uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      oldOwner?: string | null,
      newOwner?: string | null,
      salePrice?: null,
      creator?: null,
      creatorRoyalties?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, string, BigNumber],
      {
        tokenId: BigNumber;
        oldOwner: string;
        newOwner: string;
        salePrice: BigNumber;
        creator: string;
        creatorRoyalties: BigNumber;
      }
    >;

    ProtonSold(
      tokenId?: BigNumberish | null,
      oldOwner?: string | null,
      newOwner?: string | null,
      salePrice?: null,
      creator?: null,
      creatorRoyalties?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, string, BigNumber],
      {
        tokenId: BigNumber;
        oldOwner: string;
        newOwner: string;
        salePrice: BigNumber;
        creator: string;
        creatorRoyalties: BigNumber;
      }
    >;

    "RoyaltiesClaimed(address,uint256)"(
      receiver?: string | null,
      amountClaimed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amountClaimed: BigNumber }
    >;

    RoyaltiesClaimed(
      receiver?: string | null,
      amountClaimed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amountClaimed: BigNumber }
    >;

    "SalePriceSet(uint256,uint256)"(
      tokenId?: BigNumberish | null,
      salePrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; salePrice: BigNumber }
    >;

    SalePriceSet(
      tokenId?: BigNumberish | null,
      salePrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; salePrice: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    "TransferBatch(address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      startTokenId?: null,
      count?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; to: string; startTokenId: BigNumber; count: BigNumber }
    >;

    TransferBatch(
      from?: string | null,
      to?: string | null,
      startTokenId?: null,
      count?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; to: string; startTokenId: BigNumber; count: BigNumber }
    >;

    "UniverseSet(address)"(
      universe?: string | null
    ): TypedEventFilter<[string], { universe: string }>;

    UniverseSet(
      universe?: string | null
    ): TypedEventFilter<[string], { universe: string }>;

    "WithdrawStuckERC20(address,address,uint256)"(
      receiver?: string | null,
      tokenAddress?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { receiver: string; tokenAddress: string; amount: BigNumber }
    >;

    WithdrawStuckERC20(
      receiver?: string | null,
      tokenAddress?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { receiver: string; tokenAddress: string; amount: BigNumber }
    >;

    "WithdrawStuckERC721(address,address,uint256)"(
      receiver?: string | null,
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { receiver: string; tokenAddress: string; tokenId: BigNumber }
    >;

    WithdrawStuckERC721(
      receiver?: string | null,
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { receiver: string; tokenAddress: string; tokenId: BigNumber }
    >;

    "WithdrawStuckEther(address,uint256)"(
      receiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;

    WithdrawStuckEther(
      receiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchProtonsForSale(
      creator: string,
      annuityPercent: BigNumberish,
      royaltiesPercent: BigNumberish,
      tokenMetaUris: string[],
      salePrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyProton(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCreatorRoyalties(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBasicProton(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createChargedParticle(
      creator: string,
      receiver: string,
      referrer: string,
      tokenMetaUri: string,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      annuityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProton(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      annuityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProtonForSale(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      annuityPercent: BigNumberish,
      royaltiesPercent: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creatorOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorRoyalties(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorRoyaltiesPct(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorRoyaltiesReceiver(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastSellPrice(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSalePrice(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChargedParticles(
      chargedParticles: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChargedSettings(
      settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChargedState(
      stateController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreatorRoyaltiesReceiver(
      tokenId: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPausedState(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltiesPct(
      tokenId: BigNumberish,
      royaltiesPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSalePrice(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUniverse(
      universe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC721(
      receiver: string,
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawErc20(
      receiver: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchProtonsForSale(
      creator: string,
      annuityPercent: BigNumberish,
      royaltiesPercent: BigNumberish,
      tokenMetaUris: string[],
      salePrices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyProton(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCreatorRoyalties(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBasicProton(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createChargedParticle(
      creator: string,
      receiver: string,
      referrer: string,
      tokenMetaUri: string,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      annuityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProton(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      annuityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProtonForSale(
      creator: string,
      receiver: string,
      tokenMetaUri: string,
      annuityPercent: BigNumberish,
      royaltiesPercent: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creatorOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorRoyalties(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorRoyaltiesPct(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorRoyaltiesReceiver(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastSellPrice(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSalePrice(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChargedParticles(
      chargedParticles: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChargedSettings(
      settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChargedState(
      stateController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreatorRoyaltiesReceiver(
      tokenId: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPausedState(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltiesPct(
      tokenId: BigNumberish,
      royaltiesPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSalePrice(
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUniverse(
      universe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC721(
      receiver: string,
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawErc20(
      receiver: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
