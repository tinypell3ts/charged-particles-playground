/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ChargedParticlesInterface extends ethers.utils.Interface {
  functions: {
    "baseParticleMass(address,uint256,string,address)": FunctionFragment;
    "breakCovalentBond(address,address,uint256,string,address,uint256)": FunctionFragment;
    "covalentBond(address,uint256,string,address,uint256)": FunctionFragment;
    "currentParticleCharge(address,uint256,string,address)": FunctionFragment;
    "currentParticleCovalentBonds(address,uint256,string)": FunctionFragment;
    "currentParticleKinetics(address,uint256,string,address)": FunctionFragment;
    "dischargeParticle(address,address,uint256,string,address)": FunctionFragment;
    "dischargeParticleAmount(address,address,uint256,string,address,uint256)": FunctionFragment;
    "dischargeParticleForCreator(address,address,uint256,string,address,uint256)": FunctionFragment;
    "energizeParticle(address,uint256,string,address,uint256,address)": FunctionFragment;
    "getSettingsAddress()": FunctionFragment;
    "getStateAddress()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "releaseParticle(address,address,uint256,string,address)": FunctionFragment;
    "releaseParticleAmount(address,address,uint256,string,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setChargedSettings(address)": FunctionFragment;
    "setChargedState(address)": FunctionFragment;
    "setLeptonToken(address)": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "setUniverse(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "versionRecipient()": FunctionFragment;
    "withdrawERC721(address,address,uint256)": FunctionFragment;
    "withdrawErc20(address,address,uint256)": FunctionFragment;
    "withdrawEther(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseParticleMass",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "breakCovalentBond",
    values: [string, string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "covalentBond",
    values: [string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentParticleCharge",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentParticleCovalentBonds",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentParticleKinetics",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dischargeParticle",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dischargeParticleAmount",
    values: [string, string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dischargeParticleForCreator",
    values: [string, string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "energizeParticle",
    values: [string, BigNumberish, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettingsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStateAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseParticle",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseParticleAmount",
    values: [string, string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setChargedSettings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChargedState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeptonToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setUniverse", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseParticleMass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "breakCovalentBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "covalentBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentParticleCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentParticleCovalentBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentParticleKinetics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dischargeParticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dischargeParticleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dischargeParticleForCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "energizeParticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettingsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseParticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseParticleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChargedSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChargedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeptonToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;

  events: {
    "ChargedSettingsSet(address)": EventFragment;
    "ChargedStateSet(address)": EventFragment;
    "LeptonTokenSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UniverseSet(address)": EventFragment;
    "WithdrawStuckERC20(address,address,uint256)": EventFragment;
    "WithdrawStuckERC721(address,address,uint256)": EventFragment;
    "WithdrawStuckEther(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChargedSettingsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChargedStateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeptonTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniverseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStuckERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStuckERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStuckEther"): EventFragment;
}

export type ChargedSettingsSetEvent = TypedEvent<
  [string] & { chargedSettings: string }
>;

export type ChargedStateSetEvent = TypedEvent<
  [string] & { chargedState: string }
>;

export type LeptonTokenSetEvent = TypedEvent<
  [string] & { leptonToken: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UniverseSetEvent = TypedEvent<
  [string] & { universeAddress: string }
>;

export type WithdrawStuckERC20Event = TypedEvent<
  [string, string, BigNumber] & {
    receiver: string;
    tokenAddress: string;
    amount: BigNumber;
  }
>;

export type WithdrawStuckERC721Event = TypedEvent<
  [string, string, BigNumber] & {
    receiver: string;
    tokenAddress: string;
    tokenId: BigNumber;
  }
>;

export type WithdrawStuckEtherEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; amount: BigNumber }
>;

export class ChargedParticles extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChargedParticlesInterface;

  functions: {
    baseParticleMass(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    breakCovalentBond(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    covalentBond(
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentParticleCharge(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentParticleCovalentBonds(
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentParticleKinetics(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dischargeParticle(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dischargeParticleAmount(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dischargeParticleForCreator(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    energizeParticle(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSettingsAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { settingsAddress: string }>;

    getStateAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { stateAddress: string }>;

    initialize(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releaseParticle(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseParticleAmount(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChargedSettings(
      settingsController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChargedState(
      stateController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLeptonToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUniverse(
      universe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    versionRecipient(overrides?: CallOverrides): Promise<[string]>;

    withdrawERC721(
      receiver: string,
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawErc20(
      receiver: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  baseParticleMass(
    contractAddress: string,
    tokenId: BigNumberish,
    walletManagerId: string,
    assetToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  breakCovalentBond(
    receiver: string,
    contractAddress: string,
    tokenId: BigNumberish,
    basketManagerId: string,
    nftTokenAddress: string,
    nftTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  covalentBond(
    contractAddress: string,
    tokenId: BigNumberish,
    basketManagerId: string,
    nftTokenAddress: string,
    nftTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentParticleCharge(
    contractAddress: string,
    tokenId: BigNumberish,
    walletManagerId: string,
    assetToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentParticleCovalentBonds(
    contractAddress: string,
    tokenId: BigNumberish,
    basketManagerId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentParticleKinetics(
    contractAddress: string,
    tokenId: BigNumberish,
    walletManagerId: string,
    assetToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dischargeParticle(
    receiver: string,
    contractAddress: string,
    tokenId: BigNumberish,
    walletManagerId: string,
    assetToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dischargeParticleAmount(
    receiver: string,
    contractAddress: string,
    tokenId: BigNumberish,
    walletManagerId: string,
    assetToken: string,
    assetAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dischargeParticleForCreator(
    receiver: string,
    contractAddress: string,
    tokenId: BigNumberish,
    walletManagerId: string,
    assetToken: string,
    assetAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  energizeParticle(
    contractAddress: string,
    tokenId: BigNumberish,
    walletManagerId: string,
    assetToken: string,
    assetAmount: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSettingsAddress(overrides?: CallOverrides): Promise<string>;

  getStateAddress(overrides?: CallOverrides): Promise<string>;

  initialize(
    _trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  releaseParticle(
    receiver: string,
    contractAddress: string,
    tokenId: BigNumberish,
    walletManagerId: string,
    assetToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseParticleAmount(
    receiver: string,
    contractAddress: string,
    tokenId: BigNumberish,
    walletManagerId: string,
    assetToken: string,
    assetAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChargedSettings(
    settingsController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChargedState(
    stateController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLeptonToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    _trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUniverse(
    universe: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  versionRecipient(overrides?: CallOverrides): Promise<string>;

  withdrawERC721(
    receiver: string,
    tokenAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawErc20(
    receiver: string,
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseParticleMass(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    breakCovalentBond(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    covalentBond(
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: string,
      nftTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentParticleCharge(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentParticleCovalentBonds(
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentParticleKinetics(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dischargeParticle(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        creatorAmount: BigNumber;
        receiverAmount: BigNumber;
      }
    >;

    dischargeParticleAmount(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        creatorAmount: BigNumber;
        receiverAmount: BigNumber;
      }
    >;

    dischargeParticleForCreator(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    energizeParticle(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettingsAddress(overrides?: CallOverrides): Promise<string>;

    getStateAddress(overrides?: CallOverrides): Promise<string>;

    initialize(
      _trustedForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    releaseParticle(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        creatorAmount: BigNumber;
        receiverAmount: BigNumber;
      }
    >;

    releaseParticleAmount(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        creatorAmount: BigNumber;
        receiverAmount: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setChargedSettings(
      settingsController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChargedState(
      stateController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLeptonToken(token: string, overrides?: CallOverrides): Promise<void>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniverse(universe: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    versionRecipient(overrides?: CallOverrides): Promise<string>;

    withdrawERC721(
      receiver: string,
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawErc20(
      receiver: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEther(
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChargedSettingsSet(address)"(
      chargedSettings?: string | null
    ): TypedEventFilter<[string], { chargedSettings: string }>;

    ChargedSettingsSet(
      chargedSettings?: string | null
    ): TypedEventFilter<[string], { chargedSettings: string }>;

    "ChargedStateSet(address)"(
      chargedState?: string | null
    ): TypedEventFilter<[string], { chargedState: string }>;

    ChargedStateSet(
      chargedState?: string | null
    ): TypedEventFilter<[string], { chargedState: string }>;

    "LeptonTokenSet(address)"(
      leptonToken?: string | null
    ): TypedEventFilter<[string], { leptonToken: string }>;

    LeptonTokenSet(
      leptonToken?: string | null
    ): TypedEventFilter<[string], { leptonToken: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "UniverseSet(address)"(
      universeAddress?: string | null
    ): TypedEventFilter<[string], { universeAddress: string }>;

    UniverseSet(
      universeAddress?: string | null
    ): TypedEventFilter<[string], { universeAddress: string }>;

    "WithdrawStuckERC20(address,address,uint256)"(
      receiver?: string | null,
      tokenAddress?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { receiver: string; tokenAddress: string; amount: BigNumber }
    >;

    WithdrawStuckERC20(
      receiver?: string | null,
      tokenAddress?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { receiver: string; tokenAddress: string; amount: BigNumber }
    >;

    "WithdrawStuckERC721(address,address,uint256)"(
      receiver?: string | null,
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { receiver: string; tokenAddress: string; tokenId: BigNumber }
    >;

    WithdrawStuckERC721(
      receiver?: string | null,
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { receiver: string; tokenAddress: string; tokenId: BigNumber }
    >;

    "WithdrawStuckEther(address,uint256)"(
      receiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;

    WithdrawStuckEther(
      receiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    baseParticleMass(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    breakCovalentBond(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    covalentBond(
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentParticleCharge(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentParticleCovalentBonds(
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentParticleKinetics(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dischargeParticle(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dischargeParticleAmount(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dischargeParticleForCreator(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    energizeParticle(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSettingsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getStateAddress(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releaseParticle(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseParticleAmount(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChargedSettings(
      settingsController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChargedState(
      stateController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLeptonToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUniverse(
      universe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC721(
      receiver: string,
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawErc20(
      receiver: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseParticleMass(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    breakCovalentBond(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    covalentBond(
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: string,
      nftTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentParticleCharge(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentParticleCovalentBonds(
      contractAddress: string,
      tokenId: BigNumberish,
      basketManagerId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentParticleKinetics(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dischargeParticle(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dischargeParticleAmount(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dischargeParticleForCreator(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    energizeParticle(
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSettingsAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseParticle(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseParticleAmount(
      receiver: string,
      contractAddress: string,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: string,
      assetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChargedSettings(
      settingsController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChargedState(
      stateController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLeptonToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUniverse(
      universe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC721(
      receiver: string,
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawErc20(
      receiver: string,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
